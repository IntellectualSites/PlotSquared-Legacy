import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
    }
    configurations.all {
        resolutionStrategy {
            force 'org.ow2.asm:asm:7.0'
        }
    }
}

plugins {
    id 'maven-publish'
    id "org.ajoberstar.grgit" version "3.1.1"
}

group = 'com.intellectualcrafters'

def revision = ""
def buildNumber = ""
def date = ""
ext {
    git = Grgit.open(dir: new File(rootDir.toString()+'/.git'))
    date = git.head().getDate().format("yy.MM.dd")
    revision = "-${git.head().abbreviatedId}"
    parents = git.head().parentIds;
    if (project.hasProperty('buildnumber')) {
        buildNumber = "-$buildnumber"
    } else {
        index = -1352;  // Offset to match CI
        for (; parents != null && !parents.isEmpty(); index++) {
            parents = git.getResolve().toCommit(parents.get(0)).getParentIds()
        }
        buildNumber = "-${index}"
    }
}

version = date + revision + buildNumber

description = rootProject.name
if ( project.hasProperty("lzNoVersion") ) { // gradle build -PlzNoVersion
    version = "unknown";
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'com.github.johnrengelman.shadow'

    clean.doFirst {
        delete "../target"
    }
    
    dependencies {
        compile(group: 'com.sk89q.worldedit', name: 'worldedit-core', version:'6.1.3-SNAPSHOT') {
            exclude(module: 'bukkit-classloader-check')
            exclude(module: 'mockito-core')
            exclude(module: 'dummypermscompat')
        }
        compile 'com.google.guava:guava:23.0'
    }
    repositories {
        mavenCentral()
        maven {url "http://maven.sk89q.com/repo/"}
    }
}
task aggregatedJavadocs(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'Documentation') {
    destinationDir = file("./docs/javadoc")
    title = "$project.name $version API"
    options.author true
    options.links 'http://docs.spring.io/spring/docs/4.3.x/javadoc-api/', 'http://docs.oracle.com/javase/8/docs/api/', 'http://docs.spring.io/spring-ws/docs/2.3.0.RELEASE/api/', 'http://docs.spring.io/spring-security/site/docs/4.0.4.RELEASE/apidocs/'
    options.addStringOption('Xdoclint:none', '-quiet')

    delete "./docs"

    subprojects.each { proj ->
        proj.tasks.withType(Javadoc).each { javadocTask ->
            source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += javadocTask.excludes
            includes += javadocTask.includes
        }
    }
}
